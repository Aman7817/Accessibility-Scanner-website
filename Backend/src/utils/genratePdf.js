// utils/pdfGenerator.js
import PDFDocument from 'pdfkit';


const generateScanReportPDF = (report) => {
  return new Promise((resolve, reject) => {
    try {
      const doc = new PDFDocument();
      const buffers = [];
      
      doc.on('data', buffers.push.bind(buffers));
      doc.on('end', () => {
        const pdfData = Buffer.concat(buffers);
        resolve(pdfData);
      });

      // Add content to PDF
      addPDFContent(doc, report);
      doc.end();
      
    } catch (error) {
      reject(error);
    }
  });
};


const addPDFContent = (doc, report) => {
  // Title
  doc.fontSize(20).text('SECURITY SCAN REPORT', { align: 'center' });
  doc.moveDown(0.5);
  
  // Horizontal line
  doc.moveTo(50, doc.y).lineTo(550, doc.y).stroke();
  doc.moveDown();
  
  // Basic Information
  doc.fontSize(16).text('Basic Information', { underline: true });
  doc.moveDown(0.3);
  
  doc.fontSize(12)
     .text(`Report ID: ${report._id}`, { continued: false })
     .text(`Scanned URL: ${report.url || 'N/A'}`)
     .text(`Scan Date: ${new Date(report.createdAt).toLocaleString()}`)
     .text(`Overall Score: ${report.score || 'N/A'}`)
     .text(`Status: ${report.scan?.status || 'completed'}`);
  
  doc.moveDown();
  
  // Scan Summary
  doc.fontSize(16).text('Scan Summary', { underline: true });
  doc.moveDown(0.3);
  
  if (report.summary) {
    doc.fontSize(12)
       .text(`Total Violations: ${report.summary.total || report.violationsCount || 0}`)
       .text(`Critical: ${report.summary.critical || 0}`, { indent: 20 })
       .text(`Serious: ${report.summary.serious || 0}`, { indent: 20 })
       .text(`Moderate: ${report.summary.moderate || 0}`, { indent: 20 })
       .text(`Minor: ${report.summary.minor || 0}`, { indent: 20 });
  } else if (report.violationsCount !== undefined) {
    doc.text(`Total Violations: ${report.violationsCount}`);
  } else {
    doc.text('No summary data available.');
  }
  
  doc.moveDown();
  
  // Additional Details
  if (report.jsonReportFileName || report.htmlReportFileName) {
    doc.fontSize(16).text('Report Files', { underline: true });
    doc.moveDown(0.3);
    doc.fontSize(12);
    
    if (report.jsonReportFileName) {
      doc.text(`• JSON Report: ${report.jsonReportFileName}`);
    }
    if (report.htmlReportFileName) {
      doc.text(`• HTML Report: ${report.htmlReportFileName}`);
    }
    if (report.screenshotFileName) {
      doc.text(`• Screenshot: ${report.screenshotFileName}`);
    }
    
    doc.moveDown();
  }
  
  // Footer
  const footerY = doc.page.height - 50;
  doc.y = footerY;
  doc.fontSize(10)
     .text('Generated by Security Scanner', 50, footerY, { align: 'center' })
     .text(`Generated on: ${new Date().toLocaleString()}`, 50, footerY + 15, { align: 'center' });
};


 const generateTextReport = (report) => {
  let content = 'SECURITY SCAN REPORT\n';
  content += '====================\n\n';
  content += `Report ID: ${report._id}\n`;
  content += `URL: ${report.url || 'N/A'}\n`;
  content += `Date: ${new Date(report.createdAt).toLocaleString()}\n`;
  content += `Score: ${report.score || 'N/A'}\n`;
  content += `Violations: ${report.violationsCount || 0}\n\n`;
  
  if (report.summary) {
    content += 'SUMMARY:\n';
    content += `Total: ${report.summary.total || 0}\n`;
    content += `Critical: ${report.summary.critical || 0}\n`;
    content += `Serious: ${report.summary.serious || 0}\n`;
    content += `Moderate: ${report.summary.moderate || 0}\n`;
    content += `Minor: ${report.summary.minor || 0}\n`;
  }
  
  content += `\nGenerated on: ${new Date().toLocaleString()}`;
  return content;
};

 

export { 
    generateTextReport,
    generateScanReportPDF
};